{
  "Next.js API Route": {
    "prefix": "napi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "export async function GET(request: NextRequest) {",
      "  try {",
      "    // TODO: Implement GET logic",
      "    return NextResponse.json({",
      "      success: true,",
      "      data: null",
      "    });",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      {",
      "        success: false,",
      "        error: error instanceof Error ? error.message : 'Unknown error'",
      "      },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const body = await request.json();",
      "    // TODO: Validate with Zod",
      "    // TODO: Implement POST logic",
      "    ",
      "    return NextResponse.json({",
      "      success: true,",
      "      data: null",
      "    });",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      {",
      "        success: false,",
      "        error: error instanceof Error ? error.message : 'Unknown error'",
      "      },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
    ],
    "description": "Create a Next.js API route with error handling",
  },
  "Zod Schema": {
    "prefix": "zschema",
    "body": [
      "import { z } from 'zod';",
      "",
      "export const ${1:schemaName}Schema = z.object({",
      "  ${2:field}: z.string().min(1, '${3:Field is required}'),",
      "  ${4:// Add more fields}",
      "});",
      "",
      "export type ${1/(.*)/${1:/capitalize}/} = z.infer<typeof ${1:schemaName}Schema>;",
    ],
    "description": "Create a Zod validation schema",
  },
  "React Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:// Props here}",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  ${3:// Destructure props}",
      "}) => {",
      "  return (",
      "    <div>",
      "      ${4:// Component content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};",
    ],
    "description": "Create a React functional component with TypeScript",
  },
  "Database Query": {
    "prefix": "dbquery",
    "body": [
      "import { db } from '@/lib/db';",
      "import { ${1:tableName} } from '@/lib/db/schema';",
      "",
      "export async function ${2:queryName}(${3:params}) {",
      "  try {",
      "    const result = await db",
      "      .select()",
      "      .from(${1:tableName})",
      "      ${4:// Add conditions}",
      "      .limit(${5:10});",
      "    ",
      "    return result;",
      "  } catch (error) {",
      "    console.error('Database query error:', error);",
      "    throw error;",
      "  }",
      "}",
    ],
    "description": "Create a database query with error handling",
  },
  "Error Handler": {
    "prefix": "errorhandler",
    "body": [
      "try {",
      "  ${1:// Code that might throw}",
      "} catch (error) {",
      "  console.error('${2:Operation} failed:', error);",
      "  ${3:// Handle error}",
      "  throw error instanceof Error ? error : new Error('Unknown error');",
      "}",
    ],
    "description": "Create error handling block",
  },
  "Async Function": {
    "prefix": "afn",
    "body": [
      "export async function ${1:functionName}(${2:params}): Promise<${3:ReturnType}> {",
      "  try {",
      "    ${4:// Implementation}",
      "    return ${5:result};",
      "  } catch (error) {",
      "    console.error('${1:functionName} failed:', error);",
      "    throw error;",
      "  }",
      "}",
    ],
    "description": "Create async function with error handling",
  },
  "API Response Type": {
    "prefix": "apiresponse",
    "body": [
      "export interface ${1:ResponseName} {",
      "  success: boolean;",
      "  data?: ${2:DataType};",
      "  error?: string;",
      "  message?: string;",
      "}",
    ],
    "description": "Create API response type interface",
  },
  "Drizzle Schema Table": {
    "prefix": "drizzletable",
    "body": [
      "export const ${1:tableName} = pgTable('${2:table_name}', {",
      "  id: uuid('id').primaryKey().defaultRandom(),",
      "  ${3:// Add fields}",
      "  createdAt: timestamp('created_at').defaultNow().notNull(),",
      "  updatedAt: timestamp('updated_at').defaultNow().notNull(),",
      "});",
      "",
      "export type ${1/(.*)/${1:/capitalize}/} = typeof ${1:tableName}.$inferSelect;",
      "export type New${1/(.*)/${1:/capitalize}/} = typeof ${1:tableName}.$inferInsert;",
    ],
    "description": "Create a Drizzle table schema",
  },
  "Console Log Debug": {
    "prefix": "cld",
    "body": ["console.log('üêõ ${1:label}:', ${2:variable});"],
    "description": "Debug console log with emoji",
  },
  "Environment Variable": {
    "prefix": "env",
    "body": ["${1:VARIABLE_NAME}: z.string().min(1, '${1:VARIABLE_NAME} is required'),"],
    "description": "Add environment variable to schema",
  },
}
